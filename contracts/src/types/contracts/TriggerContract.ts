/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TriggerContract {
  export type TriggerStruct = {
    id: BigNumberish;
    user: AddressLike;
    targetOracleIndex: BigNumberish;
    targetToken: BigNumberish;
    usdcAmount: BigNumberish;
    triggerPrice: BigNumberish;
    isAbove: boolean;
    maxSlippage: BigNumberish;
    createdAt: BigNumberish;
    state: BigNumberish;
    executionStarted: BigNumberish;
    outputAmount: BigNumberish;
  };

  export type TriggerStructOutput = [
    id: bigint,
    user: string,
    targetOracleIndex: bigint,
    targetToken: bigint,
    usdcAmount: bigint,
    triggerPrice: bigint,
    isAbove: boolean,
    maxSlippage: bigint,
    createdAt: bigint,
    state: bigint,
    executionStarted: bigint,
    outputAmount: bigint
  ] & {
    id: bigint;
    user: string;
    targetOracleIndex: bigint;
    targetToken: bigint;
    usdcAmount: bigint;
    triggerPrice: bigint;
    isAbove: boolean;
    maxSlippage: bigint;
    createdAt: bigint;
    state: bigint;
    executionStarted: bigint;
    outputAmount: bigint;
  };
}

export interface TriggerContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "EXECUTOR_ROLE"
      | "MAX_SLIPPAGE"
      | "USDC_TOKEN_ID"
      | "cancelTrigger"
      | "claimRefund"
      | "completeTriggerExecution"
      | "convertOraclePrice"
      | "createTrigger"
      | "emergencyWithdraw"
      | "executionReward"
      | "getContractSpotBalance"
      | "getOraclePrice"
      | "getRoleAdmin"
      | "getSystemAddress"
      | "getTrigger"
      | "getUserTriggers"
      | "grantRole"
      | "hasRole"
      | "isTriggerReady"
      | "markExecutionFailed"
      | "nextTriggerId"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "setExecutionReward"
      | "setTokenContract"
      | "startTriggerExecution"
      | "supportsInterface"
      | "tokenContracts"
      | "triggers"
      | "unpause"
      | "userTriggers"
      | "userUsdcDeposits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Paused"
      | "RefundClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TriggerCancelled"
      | "TriggerCreated"
      | "TriggerExecuted"
      | "TriggerExecutionFailed"
      | "TriggerExecutionStarted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SLIPPAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTriggerExecution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertOraclePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTrigger",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractSpotBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTriggers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTriggerReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markExecutionFailed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTriggerId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startTriggerExecution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userTriggers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userUsdcDeposits",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SLIPPAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTriggerExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractSpotBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrigger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTriggerReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markExecutionFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTriggerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTriggerExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "triggers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUsdcDeposits",
    data: BytesLike
  ): Result;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundClaimedEvent {
  export type InputTuple = [
    triggerId: BigNumberish,
    user: AddressLike,
    usdcAmount: BigNumberish
  ];
  export type OutputTuple = [
    triggerId: bigint,
    user: string,
    usdcAmount: bigint
  ];
  export interface OutputObject {
    triggerId: bigint;
    user: string;
    usdcAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerCancelledEvent {
  export type InputTuple = [triggerId: BigNumberish, user: AddressLike];
  export type OutputTuple = [triggerId: bigint, user: string];
  export interface OutputObject {
    triggerId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerCreatedEvent {
  export type InputTuple = [
    triggerId: BigNumberish,
    user: AddressLike,
    targetOracleIndex: BigNumberish,
    targetToken: BigNumberish,
    usdcAmount: BigNumberish,
    triggerPrice: BigNumberish,
    isAbove: boolean,
    maxSlippage: BigNumberish
  ];
  export type OutputTuple = [
    triggerId: bigint,
    user: string,
    targetOracleIndex: bigint,
    targetToken: bigint,
    usdcAmount: bigint,
    triggerPrice: bigint,
    isAbove: boolean,
    maxSlippage: bigint
  ];
  export interface OutputObject {
    triggerId: bigint;
    user: string;
    targetOracleIndex: bigint;
    targetToken: bigint;
    usdcAmount: bigint;
    triggerPrice: bigint;
    isAbove: boolean;
    maxSlippage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerExecutedEvent {
  export type InputTuple = [
    triggerId: BigNumberish,
    executor: AddressLike,
    executionPrice: BigNumberish,
    outputAmount: BigNumberish
  ];
  export type OutputTuple = [
    triggerId: bigint,
    executor: string,
    executionPrice: bigint,
    outputAmount: bigint
  ];
  export interface OutputObject {
    triggerId: bigint;
    executor: string;
    executionPrice: bigint;
    outputAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerExecutionFailedEvent {
  export type InputTuple = [
    triggerId: BigNumberish,
    executor: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    triggerId: bigint,
    executor: string,
    reason: string
  ];
  export interface OutputObject {
    triggerId: bigint;
    executor: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerExecutionStartedEvent {
  export type InputTuple = [
    triggerId: BigNumberish,
    executor: AddressLike,
    executionPrice: BigNumberish
  ];
  export type OutputTuple = [
    triggerId: bigint,
    executor: string,
    executionPrice: bigint
  ];
  export interface OutputObject {
    triggerId: bigint;
    executor: string;
    executionPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TriggerContract extends BaseContract {
  connect(runner?: ContractRunner | null): TriggerContract;
  waitForDeployment(): Promise<this>;

  interface: TriggerContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EXECUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_SLIPPAGE: TypedContractMethod<[], [bigint], "view">;

  USDC_TOKEN_ID: TypedContractMethod<[], [bigint], "view">;

  cancelTrigger: TypedContractMethod<
    [triggerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRefund: TypedContractMethod<
    [triggerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeTriggerExecution: TypedContractMethod<
    [triggerId: BigNumberish, actualOutputAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertOraclePrice: TypedContractMethod<
    [rawPrice: BigNumberish, assetDecimals: BigNumberish],
    [bigint],
    "view"
  >;

  createTrigger: TypedContractMethod<
    [
      targetOracleIndex: BigNumberish,
      targetToken: BigNumberish,
      usdcAmount: BigNumberish,
      triggerPrice: BigNumberish,
      isAbove: boolean,
      maxSlippage: BigNumberish
    ],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executionReward: TypedContractMethod<[], [bigint], "view">;

  getContractSpotBalance: TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { total: bigint; hold: bigint }],
    "view"
  >;

  getOraclePrice: TypedContractMethod<
    [oracleIndex: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSystemAddress: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTrigger: TypedContractMethod<
    [triggerId: BigNumberish],
    [TriggerContract.TriggerStructOutput],
    "view"
  >;

  getUserTriggers: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isTriggerReady: TypedContractMethod<
    [triggerId: BigNumberish],
    [[boolean, bigint] & { conditionMet: boolean; currentPrice: bigint }],
    "view"
  >;

  markExecutionFailed: TypedContractMethod<
    [triggerId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  nextTriggerId: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setExecutionReward: TypedContractMethod<
    [newReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenContract: TypedContractMethod<
    [tokenId: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  startTriggerExecution: TypedContractMethod<
    [triggerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  triggers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        user: string;
        targetOracleIndex: bigint;
        targetToken: bigint;
        usdcAmount: bigint;
        triggerPrice: bigint;
        isAbove: boolean;
        maxSlippage: bigint;
        createdAt: bigint;
        state: bigint;
        executionStarted: bigint;
        outputAmount: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userTriggers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userUsdcDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXECUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_SLIPPAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_TOKEN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTrigger"
  ): TypedContractMethod<[triggerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[triggerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeTriggerExecution"
  ): TypedContractMethod<
    [triggerId: BigNumberish, actualOutputAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertOraclePrice"
  ): TypedContractMethod<
    [rawPrice: BigNumberish, assetDecimals: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTrigger"
  ): TypedContractMethod<
    [
      targetOracleIndex: BigNumberish,
      targetToken: BigNumberish,
      usdcAmount: BigNumberish,
      triggerPrice: BigNumberish,
      isAbove: boolean,
      maxSlippage: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executionReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractSpotBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[bigint, bigint] & { total: bigint; hold: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOraclePrice"
  ): TypedContractMethod<[oracleIndex: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSystemAddress"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTrigger"
  ): TypedContractMethod<
    [triggerId: BigNumberish],
    [TriggerContract.TriggerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTriggers"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTriggerReady"
  ): TypedContractMethod<
    [triggerId: BigNumberish],
    [[boolean, bigint] & { conditionMet: boolean; currentPrice: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "markExecutionFailed"
  ): TypedContractMethod<
    [triggerId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextTriggerId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExecutionReward"
  ): TypedContractMethod<[newReward: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenContract"
  ): TypedContractMethod<
    [tokenId: BigNumberish, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTriggerExecution"
  ): TypedContractMethod<[triggerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "triggers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        user: string;
        targetOracleIndex: bigint;
        targetToken: bigint;
        usdcAmount: bigint;
        triggerPrice: bigint;
        isAbove: boolean;
        maxSlippage: bigint;
        createdAt: bigint;
        state: bigint;
        executionStarted: bigint;
        outputAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTriggers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userUsdcDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RefundClaimed"
  ): TypedContractEvent<
    RefundClaimedEvent.InputTuple,
    RefundClaimedEvent.OutputTuple,
    RefundClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TriggerCancelled"
  ): TypedContractEvent<
    TriggerCancelledEvent.InputTuple,
    TriggerCancelledEvent.OutputTuple,
    TriggerCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TriggerCreated"
  ): TypedContractEvent<
    TriggerCreatedEvent.InputTuple,
    TriggerCreatedEvent.OutputTuple,
    TriggerCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TriggerExecuted"
  ): TypedContractEvent<
    TriggerExecutedEvent.InputTuple,
    TriggerExecutedEvent.OutputTuple,
    TriggerExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TriggerExecutionFailed"
  ): TypedContractEvent<
    TriggerExecutionFailedEvent.InputTuple,
    TriggerExecutionFailedEvent.OutputTuple,
    TriggerExecutionFailedEvent.OutputObject
  >;
  getEvent(
    key: "TriggerExecutionStarted"
  ): TypedContractEvent<
    TriggerExecutionStartedEvent.InputTuple,
    TriggerExecutionStartedEvent.OutputTuple,
    TriggerExecutionStartedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RefundClaimed(uint256,address,uint256)": TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;
    RefundClaimed: TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TriggerCancelled(uint256,address)": TypedContractEvent<
      TriggerCancelledEvent.InputTuple,
      TriggerCancelledEvent.OutputTuple,
      TriggerCancelledEvent.OutputObject
    >;
    TriggerCancelled: TypedContractEvent<
      TriggerCancelledEvent.InputTuple,
      TriggerCancelledEvent.OutputTuple,
      TriggerCancelledEvent.OutputObject
    >;

    "TriggerCreated(uint256,address,uint32,uint64,uint256,uint256,bool,uint256)": TypedContractEvent<
      TriggerCreatedEvent.InputTuple,
      TriggerCreatedEvent.OutputTuple,
      TriggerCreatedEvent.OutputObject
    >;
    TriggerCreated: TypedContractEvent<
      TriggerCreatedEvent.InputTuple,
      TriggerCreatedEvent.OutputTuple,
      TriggerCreatedEvent.OutputObject
    >;

    "TriggerExecuted(uint256,address,uint256,uint256)": TypedContractEvent<
      TriggerExecutedEvent.InputTuple,
      TriggerExecutedEvent.OutputTuple,
      TriggerExecutedEvent.OutputObject
    >;
    TriggerExecuted: TypedContractEvent<
      TriggerExecutedEvent.InputTuple,
      TriggerExecutedEvent.OutputTuple,
      TriggerExecutedEvent.OutputObject
    >;

    "TriggerExecutionFailed(uint256,address,string)": TypedContractEvent<
      TriggerExecutionFailedEvent.InputTuple,
      TriggerExecutionFailedEvent.OutputTuple,
      TriggerExecutionFailedEvent.OutputObject
    >;
    TriggerExecutionFailed: TypedContractEvent<
      TriggerExecutionFailedEvent.InputTuple,
      TriggerExecutionFailedEvent.OutputTuple,
      TriggerExecutionFailedEvent.OutputObject
    >;

    "TriggerExecutionStarted(uint256,address,uint256)": TypedContractEvent<
      TriggerExecutionStartedEvent.InputTuple,
      TriggerExecutionStartedEvent.OutputTuple,
      TriggerExecutionStartedEvent.OutputObject
    >;
    TriggerExecutionStarted: TypedContractEvent<
      TriggerExecutionStartedEvent.InputTuple,
      TriggerExecutionStartedEvent.OutputTuple,
      TriggerExecutionStartedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
